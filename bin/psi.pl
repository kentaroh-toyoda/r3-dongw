#!/usr/bin/perl

sub excmd() {
	my ($cmd) = @_;
	print "$cmd\n";
	$info = `$cmd`;
}

open cc, "<changecases.lst" or die "cannot open changecases.lst\n";
while (<cc>) {
	chomp;
	
  if ($_) {
  	@rs = split;
  	$no = $rs[0];
  	$dir1 = "../benchmarks/$rs[1]";
		$dir2 = "../benchmarks/$rs[2]";
		
		print ">>>processing case\#$no: $dir1 -> $dir2\n";
		
		# 1. PSI for native
		## we assume the existence of bi1.txt generated by r3.pl
		## rold:  how many references in the old program?
		## rnew:  how many references in the new program?
		## match: how many references in the new program match that in the old program?
		@oldsymname=();
		@oldsymaddr=();
		@newsymname=();
		@newsymaddr=();
		
		open bi, "<$dir1/build/telosb/bi1.txt" or die "cannot open $dir1/build/telosb/bi1.txt";
		while (<bi>) {
			chomp;
			if (/^ref_sym/) {
				@rs = split;
				push @oldsymname, $rs[1];
				push @oldsymaddr, hex("$rs[2]");
			}
		}
		close bi;
		open bi, "<$dir2/build/telosb/bi1.txt" or die "cannot open $dir2/build/telosb/bi1.txt";
		while (<bi>) {
			chomp;
			if (/^ref_sym/) {
				@rs = split;
				push @newsymname, $rs[1];
				push @newsymaddr, hex("$rs[2]");
			}
		}
		close bi;
		## how many matched?
		$match=0;
		for ($i=0; $i<@newsymname; $i++) {
			for ($j=0; $j<@oldsymname; $j++) {
				if ( ($newsymname[$i] eq $oldsymname[$j]) &&
				     ($newsymaddr[$i] == $oldsymaddr[$j]) ) 
				{
				  $match++;
				  last;	
				}
			}
		}
		$oldcnt = @oldsymname;
		$newcnt = @newsymname;
		$psi = $match / ($oldcnt>$newcnt ? $oldcnt : $newcnt);
		print "<<< psi_for_native $psi\n";
	}
}
close cc;

exit;
